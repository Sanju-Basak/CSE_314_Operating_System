diff --git a/Makefile b/Makefile
index 39a99d7..79e20a1 100644
--- a/Makefile
+++ b/Makefile
@@ -24,6 +24,7 @@ OBJS = \
   $K/sleeplock.o \
   $K/file.o \
   $K/pipe.o \
+  $K/swap.o \
   $K/exec.o \
   $K/sysfile.o \
   $K/kernelvec.o \
@@ -131,6 +132,7 @@ UPROGS=\
 	$U/_usertests\
 	$U/_grind\
 	$U/_wc\
+	$U/_usertest1\
 	$U/_zombie\
 
 fs.img: mkfs/mkfs README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..4dfb023 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct swap;
 
 // bio.c
 void            binit(void);
@@ -36,6 +37,8 @@ int             filewrite(struct file*, uint64, int n);
 
 // fs.c
 void            fsinit(int);
+uint            balloc(uint dev);
+void            bfree(int dev, uint b);
 int             dirlink(struct inode*, char*, uint);
 struct inode*   dirlookup(struct inode*, char*, uint*);
 struct inode*   ialloc(uint, short);
@@ -107,6 +110,13 @@ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
 
+// swap.c
+void            swapinit(void);
+void            swapfree(struct swap*);
+struct swap*    swapalloc(void);
+void            swapout(struct swap *dst_sp, char *src_pa);
+void            swapin(char *dst_pa, struct swap *src_sp);
+
 // swtch.S
 void            swtch(struct context*, struct context*);
 
@@ -173,6 +183,8 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+void            addpage(pagetable_t pagetable, uint64 va, uint64 pa);
+
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/fs.c b/kernel/fs.c
index c6bab15..2d9b419 100644
--- a/kernel/fs.c
+++ b/kernel/fs.c
@@ -62,7 +62,7 @@ bzero(int dev, int bno)
 
 // Allocate a zeroed disk block.
 // returns 0 if out of disk space.
-static uint
+uint
 balloc(uint dev)
 {
   int b, bi, m;
@@ -88,7 +88,7 @@ balloc(uint dev)
 }
 
 // Free a disk block.
-static void
+void
 bfree(int dev, uint b)
 {
   struct buf *bp;
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..2702f48 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,6 +343,7 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
+#define PTE_SWAP (1L << 8) // for swap
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/swap.c b/kernel/swap.c
new file mode 100644
index 0000000..f33bf40
--- /dev/null
+++ b/kernel/swap.c
@@ -0,0 +1,135 @@
+#include "types.h"
+#include "riscv.h"
+#include "fs.h"
+#include "spinlock.h"
+#include "defs.h"
+#include "param.h"
+#include "sleeplock.h"
+#include "buf.h"
+
+#define NBLOCKPERPAGE (PGSIZE / BSIZE)
+
+struct swap {
+  uint blocknos[NBLOCKPERPAGE];
+};
+
+struct run {
+  struct run *next;
+};
+
+struct {
+  struct spinlock lock;
+  struct run *freelist;
+} swapmem;
+
+// Initialize swapmem
+void
+swapinit(void)
+{
+  initlock(&swapmem.lock, "swapmem");
+  swapmem.freelist = 0;
+}
+
+// Allocate one swap struct.
+// Returns a pointer to the swap struct.
+// Returns 0 if the memory cannot be allocated.
+struct swap *
+swapalloc(void)
+{
+  struct run *r;
+  struct swap *s;
+
+  acquire(&swapmem.lock);
+  r = swapmem.freelist;
+  if(!r){
+    release(&swapmem.lock);
+    char *mem = kalloc();
+    char *mem_end = mem + PGSIZE;
+    for(; mem + sizeof(struct swap) <= mem_end; mem += sizeof(struct swap)){
+      r = (struct run*)mem;
+
+      acquire(&swapmem.lock);
+      r->next = swapmem.freelist;
+      swapmem.freelist = r;
+      release(&swapmem.lock);
+    }
+    acquire(&swapmem.lock);
+    r = swapmem.freelist;
+  }
+  swapmem.freelist = r->next;
+  release(&swapmem.lock);
+  
+  s = (struct swap*)r;
+  if(s)
+    memset((char*)s->blocknos, 0, sizeof(s->blocknos)); // fill with zeros
+  
+  return s;
+}
+
+// Free the swap struct pointed by s, and the blocks
+// contained in s, which normally should have been returned
+// by a call to swapalloc() and swapout().
+void
+swapfree(struct swap *s)
+{
+  uint *blockno;
+  struct run *r;
+
+  if(!s)
+    panic("swapfree");
+  
+  begin_op();
+  for(blockno = s->blocknos; blockno < &s->blocknos[NBLOCKPERPAGE]; blockno++){
+    if(*blockno)
+      bfree(ROOTDEV, *blockno);
+  }
+  end_op();
+
+  r = (struct run*)s;
+
+  acquire(&swapmem.lock);
+  r->next = swapmem.freelist;
+  swapmem.freelist = r;
+  release(&swapmem.lock);
+}
+
+// Swap out a given physical page src_pa to disk.
+// The metadata for retriving src_pa will be saved
+// to dst_pa which normally should have been returned
+// by a call to swapalloc().
+void
+swapout(struct swap *dst_sp, char *src_pa)
+{
+  uint *blockno;
+  struct buf *bp;
+  
+  begin_op();
+  for(blockno = dst_sp->blocknos; blockno < &dst_sp->blocknos[NBLOCKPERPAGE]; blockno++, src_pa += BSIZE){
+    *blockno = balloc(ROOTDEV);
+    if(*blockno == 0)
+      panic("swapout");
+    bp = bread(ROOTDEV, *blockno);
+    memmove(bp->data, src_pa, BSIZE);
+    log_write(bp);
+    brelse(bp);
+  }
+  end_op();
+}
+
+// Swap in a page into dst_pa from disk using src_sp.
+// src_sp should normally be updated with metadata
+// for retriving the page by a call to swapout().
+void
+swapin(char *dst_pa, struct swap *src_sp)
+{
+  uint *blockno;
+  struct buf *bp;
+  
+  if(!dst_pa)
+    panic("swapin");
+  for(blockno = src_sp->blocknos; blockno < &src_sp->blocknos[NBLOCKPERPAGE]; blockno++, dst_pa += BSIZE){
+    bp = bread(ROOTDEV, *blockno);
+    memmove(dst_pa, bp->data, BSIZE);
+    brelse(bp);
+  }
+}
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..2da6278 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -6,11 +6,38 @@
 #include "defs.h"
 #include "fs.h"
 
+#define MAXPAGES 10
+///structure of livepage
+
+struct livepage
+{
+  pagetable_t pagetable;
+  uint64 va, pa;
+  uint8 flag;
+
+}livepages[MAXPAGES];
+uint32 queue_head= 0;
+uint32 count= 0;  //for array count
+
+// struct Node {
+//   struct Node *next;
+// };
+
+// struct swapfile
+// {
+//   uint64 va;
+//   pagetable_t pagetable;
+//   struct swap* swap;
+//   struct traverse *header;
+// }swapfile;
+// uint32 swap_count= 0;
+
+
+
 /*
  * the kernel's page table.
  */
 pagetable_t kernel_pagetable;
-
 extern char etext[];  // kernel.ld sets this to end of kernel code.
 
 extern char trampoline[]; // trampoline.S
@@ -54,6 +81,7 @@ void
 kvminit(void)
 {
   kernel_pagetable = kvmmake();
+  swapinit();   //swap initialization
 }
 
 // Switch h/w page table register to the kernel's page table,
@@ -121,6 +149,8 @@ walkaddr(pagetable_t pagetable, uint64 va)
     return 0;
   if((*pte & PTE_U) == 0)
     return 0;
+
+  //Swap -> Livepage
   pa = PTE2PA(*pte);
   return pa;
 }
@@ -239,11 +269,23 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
       return 0;
     }
     memset(mem, 0, PGSIZE);
+
     if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_R|PTE_U|xperm) != 0){
       kfree(mem);
       uvmdealloc(pagetable, a, oldsz);
       return 0;
     }
+
+    //get pte of the page
+    pte_t *pte = walk(pagetable, a, 0);
+    //get the flags
+    uint64 flags = PTE_FLAGS(*pte);
+    //check if the page is user page and not executable
+    if(flags & PTE_U && flags & ~PTE_X){
+      //add the page to the list of pages
+      addpage(pagetable, a, (uint64)mem);
+    }
+  
   }
   return newsz;
 }
@@ -317,9 +359,15 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
       panic("uvmcopy: page not present");
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
+
+    //flag & PTE_S
+    //swap -> livepage
+
+
     if((mem = kalloc()) == 0)
       goto err;
     memmove(mem, (char*)pa, PGSIZE);
+    //livepage e add
     if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
       kfree(mem);
       goto err;
@@ -395,6 +443,57 @@ copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
   return 0;
 }
 
+//addpage function
+void addpage(pagetable_t pagetable, uint64 va, uint64 pa)
+{
+  if(count<MAXPAGES)
+  {
+    //printf("1\n");
+    livepages[count].pagetable = pagetable;
+    livepages[count].va = va;
+    livepages[count].pa = pa;
+    livepages[count].flag= 0;
+    count++;
+  }
+  else
+  {
+    struct swap* swap = swapalloc();
+    queue_head= queue_head%MAXPAGES;
+    //printf("queue_head %d\n", queue_head);
+    swapout(swap, (char*)livepages[queue_head].pa);
+    //add swapfile
+    // struct swapfile *swapfile;
+    // swapfile->swap= swap;
+    // swapfile->va= livepages[queue_head].va;
+    // swapfile->pagetable= livepages[swap_count].pagetable;
+    // swapfile= swapfile->next;
+
+    // struct traverse* traverse;
+    // traverse= swapfile.header;
+    // if(traverse)
+    // {
+    //   swapfile.header= traverse->next;
+    //   swapfile.
+    // }
+
+    // swapfiles[swap_count].swap= swap;
+    // swapfiles[swap_count].va= livepages[queue_head].va;
+    // swapfiles[swap_count].pagetable= livepages[swap_count].pagetable;
+    // swap_count++;   
+    printf("swapout %d %p %p\n", queue_head, livepages[queue_head].pa, livepages[queue_head].va);
+
+    livepages[queue_head].pagetable = pagetable;
+    livepages[queue_head].va = va;
+    livepages[queue_head].pa = pa;
+    livepages[queue_head].flag= 0;
+    queue_head++;
+  
+
+    
+    //panic("MAX_LIVEPAGES reached");
+  }
+}
+
 // Copy a null-terminated string from user to kernel.
 // Copy bytes to dst from virtual address srcva in a given page table,
 // until a '\0', or max.
@@ -436,4 +535,5 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
   } else {
     return -1;
   }
+
 }
diff --git a/user/usertest1.c b/user/usertest1.c
new file mode 100644
index 0000000..5178459
--- /dev/null
+++ b/user/usertest1.c
@@ -0,0 +1,12 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+
+int main(int argc, char *argv[])
+{
+   sbrk(atoi(argv[1]));
+   printf("Hello %d\n", atoi(argv[1]));
+
+   return 0;
+}
