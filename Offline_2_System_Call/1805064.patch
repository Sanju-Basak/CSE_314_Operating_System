diff --git a/Makefile b/Makefile
index 39a99d7..73f14e6 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
+	$U/_sysinfotest\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..de71687 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -80,3 +80,19 @@ kalloc(void)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+int kpages(void)
+{
+  struct run *r;
+  int pages=0;
+
+  acquire(&kmem.lock);
+  r = kmem.freelist;
+  while(r){
+    pages++;
+    r= r->next;
+  }
+  release(&kmem.lock);
+
+  return pages;
+}
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..c898f74 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -169,6 +169,7 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->sysNum = -1;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -652,6 +653,37 @@ either_copyin(void *dst, int user_src, uint64 src, uint64 len)
   }
 }
 
+
+/////////for tracing
+int trace(int num)
+{
+  //printf("Hello\n");
+  struct proc *p = myproc();
+  acquire(&p->lock);
+  p->sysNum= num;
+  release(&p->lock);
+  return num;
+}
+
+/// system info test
+int sysinfo(void){
+  printf("sysinfo system call prints:\n");
+  int n= kpages();
+  n= n*4094;
+  printf("free-memory: %d\n",n);
+  struct proc *p;
+  int count= 0;
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if(p->state != UNUSED)
+      count++;
+    release(&p->lock);
+  }
+  printf("n_proc : %d\n", count);
+  return 1;
+}
+
+
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
 // No lock to avoid wedging a stuck machine further.
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..21caa71 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -91,6 +91,7 @@ struct proc {
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
+  int sysNum;                  // system call number which will be traced
 
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
@@ -104,4 +105,9 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  
 };
+
+int trace(int);
+int sysinfo(void);
+int kpages(void);
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..6c0c65f 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_sysinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,19 +128,55 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_sysinfo]   sys_sysinfo,
+};
+
+
+/// array of system call names
+static char* syscallnames[] = {
+[SYS_fork]    "fork",
+[SYS_exit]    "exit",
+[SYS_wait]    "wait",
+[SYS_pipe]    "pipe",
+[SYS_read]    "read",
+[SYS_kill]    "kill",
+[SYS_exec]    "exec",
+[SYS_fstat]   "fstat",
+[SYS_chdir]   "chdir",
+[SYS_dup]     "dup",
+[SYS_getpid]  "getpid",
+[SYS_sbrk]    "sbrk",
+[SYS_sleep]   "sleep",
+[SYS_uptime]  "uptime",
+[SYS_open]    "open",
+[SYS_write]   "write",
+[SYS_mknod]   "mknod",
+[SYS_unlink]  "unlink",
+[SYS_link]    "link",
+[SYS_mkdir]   "mkdir",
+[SYS_close]   "close",
+[SYS_trace]   "trace",
+[SYS_sysinfo]   "sysinfo",
+
 };
 
 void
 syscall(void)
 {
-  int num;
+  int num, traceNum;
   struct proc *p = myproc();
 
   num = p->trapframe->a7;
+  traceNum= p->sysNum;
+
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
     p->trapframe->a0 = syscalls[num]();
+    if(num== traceNum){
+      printf("pid: %d, syscall: %s, return value: %d, \n",p->pid, syscallnames[traceNum], p->trapframe->a0);
+    }
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..0dfedc7 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
+#define SYS_sysinfo 23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..3fc1d9a 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,17 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64 sys_trace(void)
+{
+  int num;
+  argint(0, &num);
+
+  //printf("SysCall number: %d\n", num);
+  return trace(num);
+}
+
+uint64 sys_sysinfo(void)
+{
+  return sysinfo();
+}
diff --git a/user/sysinfotest.c b/user/sysinfotest.c
new file mode 100644
index 0000000..8d50f7e
--- /dev/null
+++ b/user/sysinfotest.c
@@ -0,0 +1,72 @@
+#include "kernel/types.h"
+#include "kernel/riscv.h"
+#include "user/user.h"
+
+
+void
+sinfo() {
+  if (sysinfo() < 0) {
+    printf("FAIL: sysinfo failed");
+    exit(1);
+  }
+}
+
+
+void
+testmem() {
+  printf("\n\t\t\tTesting memory\n");
+  printf("\nInitial State\n");
+  sinfo();
+
+  printf("Using up one more page (4094 bytes).\nFreemem should reduce by that much!\n");
+  if((uint64)sbrk(PGSIZE) == 0xffffffffffffffff){
+    printf("sbrk failed");
+    exit(1);
+  }
+
+  sinfo();
+
+  printf("Giving back that one more page to the pool (4094 bytes).\nFreemem should go back to the initial value!\n");
+  
+  if((uint64)sbrk(-PGSIZE) == 0xffffffffffffffff){
+    printf("sbrk failed");
+    exit(1);
+  }
+
+  sinfo();
+}
+
+void testproc() {
+  int status;
+  int pid;
+
+  printf("\n\t\t\tTesting nproc\n");
+  printf("\nInitial State\n");
+  sinfo();
+
+  pid = fork();
+  if(pid < 0){
+    printf("sysinfotest: fork failed\n");
+    exit(1);
+  }
+  if(pid == 0){  // inside the child process
+    printf("Created one new process. So nproc should increase by 1.\n");
+    sinfo();
+    exit(0);
+  }
+
+  wait(&status); // wait for the created child process to end
+  printf("Created process ended. So nproc should go back to initial value.\n");
+  sinfo(); 
+}
+
+
+int
+main(int argc, char *argv[])
+{
+  printf("sysinfotest: start\n");
+  testmem();
+  testproc();
+  printf("sysinfotest: done\n");
+  exit(0);
+}
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..923d7ed
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+  
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..b8500b8 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+int sysinfo(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..bc109fd 100644
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("sysinfo");
